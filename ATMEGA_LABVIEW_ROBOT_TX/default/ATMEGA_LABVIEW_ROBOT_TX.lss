
ATMEGA_LABVIEW_ROBOT_TX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000430  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004a  00800060  00000430  000004a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000060  00000000  00000000  000004ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000d5  00000000  00000000  0000054e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000008c7  00000000  00000000  00000623  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000340  00000000  00000000  00000eea  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000726  00000000  00000000  0000122a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000e0  00000000  00000000  00001950  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001c5  00000000  00000000  00001a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000036b  00000000  00000000  00001bf5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000060  00000000  00000000  00001f60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e3       	ldi	r30, 0x30	; 48
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 3a       	cpi	r26, 0xAA	; 170
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 16 02 	jmp	0x42c	; 0x42c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include<util/delay.h>
#include"lcd.h"

void main()
{
	USARTInit(51);
  82:	83 e3       	ldi	r24, 0x33	; 51
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	0e 94 c7 01 	call	0x38e	; 0x38e <USARTInit>
	InitLCD(0);
  8a:	80 e0       	ldi	r24, 0x00	; 0
  8c:	0e 94 27 01 	call	0x24e	; 0x24e <InitLCD>
	char data;
	DDRB=0xFF;
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	87 bb       	out	0x17, r24	; 23
	LCDWriteStringXY(0,0,"LABVIEW GUI");
  94:	80 e0       	ldi	r24, 0x00	; 0
  96:	60 e0       	ldi	r22, 0x00	; 0
  98:	0e 94 be 01 	call	0x37c	; 0x37c <LCDGotoXY>
  9c:	80 e6       	ldi	r24, 0x60	; 96
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCDWriteString>
	LCDWriteStringXY(0,1,"With PROTEUS");
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	61 e0       	ldi	r22, 0x01	; 1
  a8:	0e 94 be 01 	call	0x37c	; 0x37c <LCDGotoXY>
  ac:	8c e6       	ldi	r24, 0x6C	; 108
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCDWriteString>
  b4:	80 e1       	ldi	r24, 0x10	; 16
  b6:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b8:	29 e1       	ldi	r18, 0x19	; 25
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	f9 01       	movw	r30, r18
  be:	31 97       	sbiw	r30, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <main+0x3c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  c2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  c4:	d9 f7       	brne	.-10     	; 0xbc <main+0x3a>
	_delay_ms(1000);
	LCDClear();
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	60 e0       	ldi	r22, 0x00	; 0
  cc:	70 e0       	ldi	r23, 0x00	; 0
  ce:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCDByte>
	LCDWriteStringXY(0,0,"waiting--------");
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	60 e0       	ldi	r22, 0x00	; 0
  d6:	0e 94 be 01 	call	0x37c	; 0x37c <LCDGotoXY>
  da:	89 e7       	ldi	r24, 0x79	; 121
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCDWriteString>
	while(1)
	{
	data= USARTReadChar();
  e2:	0e 94 ce 01 	call	0x39c	; 0x39c <USARTReadChar>
	if(data=='W')
  e6:	87 35       	cpi	r24, 0x57	; 87
  e8:	89 f4       	brne	.+34     	; 0x10c <main+0x8a>
	   {
	    LCDClear();
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	60 e0       	ldi	r22, 0x00	; 0
  f0:	70 e0       	ldi	r23, 0x00	; 0
  f2:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCDByte>
	 //	PORTB=0b00000001;
		LCDWriteStringXY(0,0,"FORWARD");
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	60 e0       	ldi	r22, 0x00	; 0
  fa:	0e 94 be 01 	call	0x37c	; 0x37c <LCDGotoXY>
  fe:	89 e8       	ldi	r24, 0x89	; 137
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCDWriteString>
		USARTWriteChar('W');
 106:	87 e5       	ldi	r24, 0x57	; 87
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	4c c0       	rjmp	.+152    	; 0x1a4 <main+0x122>
    	}
	else if(data=='Z')
 10c:	8a 35       	cpi	r24, 0x5A	; 90
 10e:	89 f4       	brne	.+34     	; 0x132 <main+0xb0>
	   {
		LCDClear();
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	60 e0       	ldi	r22, 0x00	; 0
 116:	70 e0       	ldi	r23, 0x00	; 0
 118:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCDByte>
	 	//PORTB=0b00000010;
		LCDWriteStringXY(0,0,"REVERSE");
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	60 e0       	ldi	r22, 0x00	; 0
 120:	0e 94 be 01 	call	0x37c	; 0x37c <LCDGotoXY>
 124:	81 e9       	ldi	r24, 0x91	; 145
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCDWriteString>
		USARTWriteChar('Z');
 12c:	8a e5       	ldi	r24, 0x5A	; 90
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	39 c0       	rjmp	.+114    	; 0x1a4 <main+0x122>
    	}
	else if(data=='X')
 132:	88 35       	cpi	r24, 0x58	; 88
 134:	89 f4       	brne	.+34     	; 0x158 <main+0xd6>
	   {
	   LCDClear();
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	70 e0       	ldi	r23, 0x00	; 0
 13e:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCDByte>
	 	//PORTB=0b00000010;
		LCDWriteStringXY(0,0,"RIGHT");
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	60 e0       	ldi	r22, 0x00	; 0
 146:	0e 94 be 01 	call	0x37c	; 0x37c <LCDGotoXY>
 14a:	89 e9       	ldi	r24, 0x99	; 153
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCDWriteString>
		USARTWriteChar('X');
 152:	88 e5       	ldi	r24, 0x58	; 88
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	26 c0       	rjmp	.+76     	; 0x1a4 <main+0x122>
		}

	else if(data=='Y')
 158:	89 35       	cpi	r24, 0x59	; 89
 15a:	89 f4       	brne	.+34     	; 0x17e <main+0xfc>
	   {
	   LCDClear();
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	60 e0       	ldi	r22, 0x00	; 0
 162:	70 e0       	ldi	r23, 0x00	; 0
 164:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCDByte>
	 	//PORTB=0b00000010;
		LCDWriteStringXY(0,0,"LEFT");
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	60 e0       	ldi	r22, 0x00	; 0
 16c:	0e 94 be 01 	call	0x37c	; 0x37c <LCDGotoXY>
 170:	8f e9       	ldi	r24, 0x9F	; 159
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCDWriteString>
		USARTWriteChar('Y');
 178:	89 e5       	ldi	r24, 0x59	; 89
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	13 c0       	rjmp	.+38     	; 0x1a4 <main+0x122>
		}
	else if(data=='E') 
 17e:	85 34       	cpi	r24, 0x45	; 69
 180:	09 f0       	breq	.+2      	; 0x184 <main+0x102>
 182:	af cf       	rjmp	.-162    	; 0xe2 <main+0x60>
	   {
	    LCDClear();
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	60 e0       	ldi	r22, 0x00	; 0
 18a:	70 e0       	ldi	r23, 0x00	; 0
 18c:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCDByte>
	    //PORTB=0b00000000;
		LCDWriteStringXY(0,0,"STOP");
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	60 e0       	ldi	r22, 0x00	; 0
 194:	0e 94 be 01 	call	0x37c	; 0x37c <LCDGotoXY>
 198:	84 ea       	ldi	r24, 0xA4	; 164
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCDWriteString>
    	USARTWriteChar('E');
 1a0:	85 e4       	ldi	r24, 0x45	; 69
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <USARTWriteChar>
 1a8:	9c cf       	rjmp	.-200    	; 0xe2 <main+0x60>

000001aa <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
 1aa:	84 b3       	in	r24, 0x14	; 20
 1ac:	80 7f       	andi	r24, 0xF0	; 240
 1ae:	84 bb       	out	0x14, r24	; 20

	//change LCD mode
	SET_RW();		//Read mode
 1b0:	95 9a       	sbi	0x12, 5	; 18
	CLEAR_RS();		//Read status
 1b2:	96 98       	cbi	0x12, 6	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	8a 95       	dec	r24
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <LCDBusyLoop+0xc>

	
	do
	{

		SET_E();
 1ba:	21 e0       	ldi	r18, 0x01	; 1
 1bc:	97 9a       	sbi	0x12, 7	; 18
 1be:	82 2f       	mov	r24, r18
 1c0:	8a 95       	dec	r24
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <LCDBusyLoop+0x16>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=LCD_DATA_PIN;
 1c4:	83 b3       	in	r24, 0x13	; 19
		status=status<<4;
 1c6:	82 95       	swap	r24
 1c8:	80 7f       	andi	r24, 0xF0	; 240
 1ca:	92 2f       	mov	r25, r18
 1cc:	9a 95       	dec	r25
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <LCDBusyLoop+0x22>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
 1d0:	97 98       	cbi	0x12, 7	; 18
 1d2:	92 2f       	mov	r25, r18
 1d4:	9a 95       	dec	r25
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <LCDBusyLoop+0x2a>
		_delay_us(1);	//tEL

		SET_E();
 1d8:	97 9a       	sbi	0x12, 7	; 18
 1da:	92 2f       	mov	r25, r18
 1dc:	9a 95       	dec	r25
 1de:	f1 f7       	brne	.-4      	; 0x1dc <LCDBusyLoop+0x32>
		_delay_us(0.5);

		temp=LCD_DATA_PIN;
 1e0:	93 b3       	in	r25, 0x13	; 19
 1e2:	92 2f       	mov	r25, r18
 1e4:	9a 95       	dec	r25
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <LCDBusyLoop+0x3a>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
 1e8:	97 98       	cbi	0x12, 7	; 18
 1ea:	92 2f       	mov	r25, r18
 1ec:	9a 95       	dec	r25
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <LCDBusyLoop+0x42>
		_delay_us(1);	//tEL
	}while(busy);
 1f0:	87 fd       	sbrc	r24, 7
 1f2:	e4 cf       	rjmp	.-56     	; 0x1bc <LCDBusyLoop+0x12>

	CLEAR_RW();		//write mode
 1f4:	95 98       	cbi	0x12, 5	; 18
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
 1f6:	84 b3       	in	r24, 0x14	; 20
 1f8:	8f 60       	ori	r24, 0x0F	; 15
 1fa:	84 bb       	out	0x14, r24	; 20

}
 1fc:	08 95       	ret

000001fe <LCDByte>:
#define CLEAR_RW() (LCD_RW_PORT&=(~(1<<LCD_RW_POS)))



void LCDByte(uint8_t c,uint8_t isdata)
{
 1fe:	38 2f       	mov	r19, r24
uint8_t temp;

hn=c>>4;
ln=(c & 0x0F);

if(isdata==0)
 200:	66 23       	and	r22, r22
 202:	11 f4       	brne	.+4      	; 0x208 <LCDByte+0xa>
	CLEAR_RS();
 204:	96 98       	cbi	0x12, 6	; 18
 206:	01 c0       	rjmp	.+2      	; 0x20a <LCDByte+0xc>
else
	SET_RS();
 208:	96 9a       	sbi	0x12, 6	; 18
 20a:	21 e0       	ldi	r18, 0x01	; 1
 20c:	82 2f       	mov	r24, r18
 20e:	8a 95       	dec	r24
 210:	f1 f7       	brne	.-4      	; 0x20e <LCDByte+0x10>

_delay_us(0.500);		//tAS

SET_E();
 212:	97 9a       	sbi	0x12, 7	; 18

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
 214:	85 b3       	in	r24, 0x15	; 21
 216:	93 2f       	mov	r25, r19
 218:	92 95       	swap	r25
 21a:	9f 70       	andi	r25, 0x0F	; 15
 21c:	80 7f       	andi	r24, 0xF0	; 240
 21e:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
 220:	95 bb       	out	0x15, r25	; 21
 222:	82 2f       	mov	r24, r18
 224:	8a 95       	dec	r24
 226:	f1 f7       	brne	.-4      	; 0x224 <LCDByte+0x26>

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
 228:	97 98       	cbi	0x12, 7	; 18
 22a:	82 2f       	mov	r24, r18
 22c:	8a 95       	dec	r24
 22e:	f1 f7       	brne	.-4      	; 0x22c <LCDByte+0x2e>

_delay_us(1);

//Send the lower nibble
SET_E();
 230:	97 9a       	sbi	0x12, 7	; 18

temp=(LCD_DATA_PORT & 0XF0)|(ln);
 232:	85 b3       	in	r24, 0x15	; 21
 234:	3f 70       	andi	r19, 0x0F	; 15
 236:	80 7f       	andi	r24, 0xF0	; 240
 238:	83 2b       	or	r24, r19

LCD_DATA_PORT=temp;
 23a:	85 bb       	out	0x15, r24	; 21
 23c:	82 2f       	mov	r24, r18
 23e:	8a 95       	dec	r24
 240:	f1 f7       	brne	.-4      	; 0x23e <LCDByte+0x40>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
 242:	97 98       	cbi	0x12, 7	; 18
 244:	2a 95       	dec	r18
 246:	f1 f7       	brne	.-4      	; 0x244 <LCDByte+0x46>

_delay_us(1);			//tEL

LCDBusyLoop();
 248:	0e 94 d5 00 	call	0x1aa	; 0x1aa <LCDBusyLoop>
}
 24c:	08 95       	ret

0000024e <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
 24e:	1f 93       	push	r17
 250:	18 2f       	mov	r17, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 252:	8c e4       	ldi	r24, 0x4C	; 76
 254:	9d e1       	ldi	r25, 0x1D	; 29
 256:	01 97       	sbiw	r24, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <InitLCD+0x8>
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 25a:	84 b3       	in	r24, 0x14	; 20
 25c:	8f 60       	ori	r24, 0x0F	; 15
 25e:	84 bb       	out	0x14, r24	; 20
	LCD_E_DDR|=(1<<LCD_E_POS);
 260:	8f 9a       	sbi	0x11, 7	; 17
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 262:	8e 9a       	sbi	0x11, 6	; 17
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 264:	8d 9a       	sbi	0x11, 5	; 17

	LCD_DATA_PORT&=0XF0;
 266:	85 b3       	in	r24, 0x15	; 21
 268:	80 7f       	andi	r24, 0xF0	; 240
 26a:	85 bb       	out	0x15, r24	; 21
	CLEAR_E();
 26c:	97 98       	cbi	0x12, 7	; 18
	CLEAR_RW();
 26e:	95 98       	cbi	0x12, 5	; 18
	CLEAR_RS();
 270:	96 98       	cbi	0x12, 6	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	98 2f       	mov	r25, r24
 276:	9a 95       	dec	r25
 278:	f1 f7       	brne	.-4      	; 0x276 <InitLCD+0x28>

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 27a:	97 9a       	sbi	0x12, 7	; 18
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 27c:	a9 9a       	sbi	0x15, 1	; 21
 27e:	98 2f       	mov	r25, r24
 280:	9a 95       	dec	r25
 282:	f1 f7       	brne	.-4      	; 0x280 <InitLCD+0x32>
	_delay_us(1);
	CLEAR_E();
 284:	97 98       	cbi	0x12, 7	; 18
 286:	8a 95       	dec	r24
 288:	f1 f7       	brne	.-4      	; 0x286 <InitLCD+0x38>
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 28a:	0e 94 d5 00 	call	0x1aa	; 0x1aa <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 28e:	81 2f       	mov	r24, r17
 290:	8c 60       	ori	r24, 0x0C	; 12
 292:	60 e0       	ldi	r22, 0x00	; 0
 294:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 298:	88 e2       	ldi	r24, 0x28	; 40
 29a:	60 e0       	ldi	r22, 0x00	; 0
 29c:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCDByte>
}
 2a0:	1f 91       	pop	r17
 2a2:	08 95       	ret

000002a4 <LCDWriteString>:
void LCDWriteString(const char *msg)
{
 2a4:	cf 93       	push	r28
 2a6:	df 93       	push	r29
 2a8:	ec 01       	movw	r28, r24
 2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <LCDWriteString+0x10>


	*****************************************************************/
 while(*msg!='\0')
 {
	LCDData(*msg);
 2ac:	61 e0       	ldi	r22, 0x01	; 1
 2ae:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCDByte>
	msg++;
 2b2:	21 96       	adiw	r28, 0x01	; 1
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 2b4:	88 81       	ld	r24, Y
 2b6:	88 23       	and	r24, r24
 2b8:	c9 f7       	brne	.-14     	; 0x2ac <LCDWriteString+0x8>
 {
	LCDData(*msg);
	msg++;
 }
}
 2ba:	df 91       	pop	r29
 2bc:	cf 91       	pop	r28
 2be:	08 95       	ret

000002c0 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 2c0:	ef 92       	push	r14
 2c2:	ff 92       	push	r15
 2c4:	0f 93       	push	r16
 2c6:	1f 93       	push	r17
 2c8:	df 93       	push	r29
 2ca:	cf 93       	push	r28
 2cc:	00 d0       	rcall	.+0      	; 0x2ce <LCDWriteInt+0xe>
 2ce:	00 d0       	rcall	.+0      	; 0x2d0 <LCDWriteInt+0x10>
 2d0:	0f 92       	push	r0
 2d2:	cd b7       	in	r28, 0x3d	; 61
 2d4:	de b7       	in	r29, 0x3e	; 62
 2d6:	9c 01       	movw	r18, r24
 2d8:	8b 01       	movw	r16, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 2da:	fe 01       	movw	r30, r28
 2dc:	31 96       	adiw	r30, 0x01	; 1
 2de:	85 e0       	ldi	r24, 0x05	; 5
 2e0:	df 01       	movw	r26, r30
 2e2:	1d 92       	st	X+, r1
 2e4:	8a 95       	dec	r24
 2e6:	e9 f7       	brne	.-6      	; 0x2e2 <LCDWriteInt+0x22>
 2e8:	fe 01       	movw	r30, r28
 2ea:	35 96       	adiw	r30, 0x05	; 5
 2ec:	0d c0       	rjmp	.+26     	; 0x308 <LCDWriteInt+0x48>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 2ee:	c9 01       	movw	r24, r18
 2f0:	6a e0       	ldi	r22, 0x0A	; 10
 2f2:	70 e0       	ldi	r23, 0x00	; 0
 2f4:	0e 94 ef 01 	call	0x3de	; 0x3de <__divmodhi4>
 2f8:	80 83       	st	Z, r24
	val=val/10;
 2fa:	c9 01       	movw	r24, r18
 2fc:	6a e0       	ldi	r22, 0x0A	; 10
 2fe:	70 e0       	ldi	r23, 0x00	; 0
 300:	0e 94 ef 01 	call	0x3de	; 0x3de <__divmodhi4>
 304:	9b 01       	movw	r18, r22
 306:	31 97       	sbiw	r30, 0x01	; 1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 308:	21 15       	cp	r18, r1
 30a:	31 05       	cpc	r19, r1
 30c:	81 f7       	brne	.-32     	; 0x2ee <LCDWriteInt+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 30e:	bf ef       	ldi	r27, 0xFF	; 255
 310:	0f 3f       	cpi	r16, 0xFF	; 255
 312:	1b 07       	cpc	r17, r27
 314:	79 f4       	brne	.+30     	; 0x334 <LCDWriteInt+0x74>
 316:	20 e0       	ldi	r18, 0x00	; 0
 318:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
 31a:	ae 01       	movw	r20, r28
 31c:	4f 5f       	subi	r20, 0xFF	; 255
 31e:	5f 4f       	sbci	r21, 0xFF	; 255
 320:	02 c0       	rjmp	.+4      	; 0x326 <LCDWriteInt+0x66>
 322:	2f 5f       	subi	r18, 0xFF	; 255
 324:	3f 4f       	sbci	r19, 0xFF	; 255
 326:	fa 01       	movw	r30, r20
 328:	e2 0f       	add	r30, r18
 32a:	f3 1f       	adc	r31, r19
 32c:	80 81       	ld	r24, Z
 32e:	88 23       	and	r24, r24
 330:	c1 f3       	breq	.-16     	; 0x322 <LCDWriteInt+0x62>
 332:	04 c0       	rjmp	.+8      	; 0x33c <LCDWriteInt+0x7c>
	else
		j=5-field_length;
 334:	25 e0       	ldi	r18, 0x05	; 5
 336:	30 e0       	ldi	r19, 0x00	; 0
 338:	20 1b       	sub	r18, r16
 33a:	31 0b       	sbc	r19, r17
 33c:	7e 01       	movw	r14, r28
 33e:	08 94       	sec
 340:	e1 1c       	adc	r14, r1
 342:	f1 1c       	adc	r15, r1
 344:	e2 0e       	add	r14, r18
 346:	f3 1e       	adc	r15, r19
 348:	89 01       	movw	r16, r18
 34a:	09 c0       	rjmp	.+18     	; 0x35e <LCDWriteInt+0x9e>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 34c:	f7 01       	movw	r30, r14
 34e:	81 91       	ld	r24, Z+
 350:	7f 01       	movw	r14, r30
 352:	80 5d       	subi	r24, 0xD0	; 208
 354:	61 e0       	ldi	r22, 0x01	; 1
 356:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 35a:	0f 5f       	subi	r16, 0xFF	; 255
 35c:	1f 4f       	sbci	r17, 0xFF	; 255
 35e:	05 30       	cpi	r16, 0x05	; 5
 360:	11 05       	cpc	r17, r1
 362:	a4 f3       	brlt	.-24     	; 0x34c <LCDWriteInt+0x8c>
	{
	LCDData(48+str[i]);
	}
}
 364:	0f 90       	pop	r0
 366:	0f 90       	pop	r0
 368:	0f 90       	pop	r0
 36a:	0f 90       	pop	r0
 36c:	0f 90       	pop	r0
 36e:	cf 91       	pop	r28
 370:	df 91       	pop	r29
 372:	1f 91       	pop	r17
 374:	0f 91       	pop	r16
 376:	ff 90       	pop	r15
 378:	ef 90       	pop	r14
 37a:	08 95       	ret

0000037c <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
 37c:	88 32       	cpi	r24, 0x28	; 40
 37e:	30 f4       	brcc	.+12     	; 0x38c <LCDGotoXY+0x10>
 {
  if(y) x|=0b01000000;
 380:	61 11       	cpse	r22, r1
 382:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
 384:	80 68       	ori	r24, 0x80	; 128
 386:	60 e0       	ldi	r22, 0x00	; 0
 388:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCDByte>
 38c:	08 95       	ret

0000038e <USARTInit>:
void USARTInit(uint16_t ubrr_value)
{

   //Set Baud rate

   UBRRL = ubrr_value;
 38e:	89 b9       	out	0x09, r24	; 9
   UBRRH = (ubrr_value>>8);
 390:	90 bd       	out	0x20, r25	; 32

   >> char size 8

   */

   UCSRC=(1<<URSEL)|(3<<UCSZ0);
 392:	86 e8       	ldi	r24, 0x86	; 134
 394:	80 bd       	out	0x20, r24	; 32


   //Enable The receiver and transmitter

   UCSRB=(1<<RXEN)|(1<<TXEN)|(1<<RXCIE)|(1<<TXCIE);
 396:	88 ed       	ldi	r24, 0xD8	; 216
 398:	8a b9       	out	0x0a, r24	; 10


}
 39a:	08 95       	ret

0000039c <USARTReadChar>:
//available.
char USARTReadChar()
{
   //Wait untill a data is available

   while(!(UCSRA & (1<<RXC)))
 39c:	5f 9b       	sbis	0x0b, 7	; 11
 39e:	fe cf       	rjmp	.-4      	; 0x39c <USARTReadChar>
   }

   //Now USART has got data from host
   //and is available is buffer

   return UDR;
 3a0:	8c b1       	in	r24, 0x0c	; 12
}
 3a2:	08 95       	ret

000003a4 <USARTWriteChar>:
//the USART which then transmit it via TX line
void USARTWriteChar(char data)
{
   //Wait untill the transmitter is ready

   while(!(UCSRA & (1<<UDRE)))
 3a4:	5d 9b       	sbis	0x0b, 5	; 11
 3a6:	fe cf       	rjmp	.-4      	; 0x3a4 <USARTWriteChar>
      //Do nothing
   }

   //Now write the data to USART buffer

   UDR=data;
 3a8:	8c b9       	out	0x0c, r24	; 12
}
 3aa:	08 95       	ret

000003ac <write>:
void write(char data[])
{
 3ac:	fc 01       	movw	r30, r24
//the USART which then transmit it via TX line
void USARTWriteChar(char data)
{
   //Wait untill the transmitter is ready

   while(!(UCSRA & (1<<UDRE)))
 3ae:	5d 9b       	sbis	0x0b, 5	; 11
 3b0:	fe cf       	rjmp	.-4      	; 0x3ae <write+0x2>
      //Do nothing
   }

   //Now write the data to USART buffer

   UDR=data;
 3b2:	83 e2       	ldi	r24, 0x23	; 35
 3b4:	8c b9       	out	0x0c, r24	; 12
//the USART which then transmit it via TX line
void USARTWriteChar(char data)
{
   //Wait untill the transmitter is ready

   while(!(UCSRA & (1<<UDRE)))
 3b6:	5d 9b       	sbis	0x0b, 5	; 11
 3b8:	fe cf       	rjmp	.-4      	; 0x3b6 <write+0xa>
      //Do nothing
   }

   //Now write the data to USART buffer

   UDR=data;
 3ba:	83 e0       	ldi	r24, 0x03	; 3
 3bc:	8c b9       	out	0x0c, r24	; 12
//the USART which then transmit it via TX line
void USARTWriteChar(char data)
{
   //Wait untill the transmitter is ready

   while(!(UCSRA & (1<<UDRE)))
 3be:	5d 9b       	sbis	0x0b, 5	; 11
 3c0:	fe cf       	rjmp	.-4      	; 0x3be <write+0x12>
      //Do nothing
   }

   //Now write the data to USART buffer

   UDR=data;
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	03 c0       	rjmp	.+6      	; 0x3cc <write+0x20>
//the USART which then transmit it via TX line
void USARTWriteChar(char data)
{
   //Wait untill the transmitter is ready

   while(!(UCSRA & (1<<UDRE)))
 3c6:	5d 9b       	sbis	0x0b, 5	; 11
 3c8:	fe cf       	rjmp	.-4      	; 0x3c6 <write+0x1a>
{
	USARTWriteChar('#');
	USARTWriteChar(3);
	USARTWriteChar(1);

	while(*data) USARTWriteChar(*data++);
 3ca:	31 96       	adiw	r30, 0x01	; 1
      //Do nothing
   }

   //Now write the data to USART buffer

   UDR=data;
 3cc:	8c b9       	out	0x0c, r24	; 12
{
	USARTWriteChar('#');
	USARTWriteChar(3);
	USARTWriteChar(1);

	while(*data) USARTWriteChar(*data++);
 3ce:	80 81       	ld	r24, Z
 3d0:	88 23       	and	r24, r24
 3d2:	c9 f7       	brne	.-14     	; 0x3c6 <write+0x1a>
//the USART which then transmit it via TX line
void USARTWriteChar(char data)
{
   //Wait untill the transmitter is ready

   while(!(UCSRA & (1<<UDRE)))
 3d4:	5d 9b       	sbis	0x0b, 5	; 11
 3d6:	fe cf       	rjmp	.-4      	; 0x3d4 <write+0x28>
      //Do nothing
   }

   //Now write the data to USART buffer

   UDR=data;
 3d8:	8a e0       	ldi	r24, 0x0A	; 10
 3da:	8c b9       	out	0x0c, r24	; 12
	USARTWriteChar(3);
	USARTWriteChar(1);

	while(*data) USARTWriteChar(*data++);
	USARTWriteChar('\n');
}
 3dc:	08 95       	ret

000003de <__divmodhi4>:
 3de:	97 fb       	bst	r25, 7
 3e0:	09 2e       	mov	r0, r25
 3e2:	07 26       	eor	r0, r23
 3e4:	0a d0       	rcall	.+20     	; 0x3fa <__divmodhi4_neg1>
 3e6:	77 fd       	sbrc	r23, 7
 3e8:	04 d0       	rcall	.+8      	; 0x3f2 <__divmodhi4_neg2>
 3ea:	0c d0       	rcall	.+24     	; 0x404 <__udivmodhi4>
 3ec:	06 d0       	rcall	.+12     	; 0x3fa <__divmodhi4_neg1>
 3ee:	00 20       	and	r0, r0
 3f0:	1a f4       	brpl	.+6      	; 0x3f8 <__divmodhi4_exit>

000003f2 <__divmodhi4_neg2>:
 3f2:	70 95       	com	r23
 3f4:	61 95       	neg	r22
 3f6:	7f 4f       	sbci	r23, 0xFF	; 255

000003f8 <__divmodhi4_exit>:
 3f8:	08 95       	ret

000003fa <__divmodhi4_neg1>:
 3fa:	f6 f7       	brtc	.-4      	; 0x3f8 <__divmodhi4_exit>
 3fc:	90 95       	com	r25
 3fe:	81 95       	neg	r24
 400:	9f 4f       	sbci	r25, 0xFF	; 255
 402:	08 95       	ret

00000404 <__udivmodhi4>:
 404:	aa 1b       	sub	r26, r26
 406:	bb 1b       	sub	r27, r27
 408:	51 e1       	ldi	r21, 0x11	; 17
 40a:	07 c0       	rjmp	.+14     	; 0x41a <__udivmodhi4_ep>

0000040c <__udivmodhi4_loop>:
 40c:	aa 1f       	adc	r26, r26
 40e:	bb 1f       	adc	r27, r27
 410:	a6 17       	cp	r26, r22
 412:	b7 07       	cpc	r27, r23
 414:	10 f0       	brcs	.+4      	; 0x41a <__udivmodhi4_ep>
 416:	a6 1b       	sub	r26, r22
 418:	b7 0b       	sbc	r27, r23

0000041a <__udivmodhi4_ep>:
 41a:	88 1f       	adc	r24, r24
 41c:	99 1f       	adc	r25, r25
 41e:	5a 95       	dec	r21
 420:	a9 f7       	brne	.-22     	; 0x40c <__udivmodhi4_loop>
 422:	80 95       	com	r24
 424:	90 95       	com	r25
 426:	bc 01       	movw	r22, r24
 428:	cd 01       	movw	r24, r26
 42a:	08 95       	ret

0000042c <_exit>:
 42c:	f8 94       	cli

0000042e <__stop_program>:
 42e:	ff cf       	rjmp	.-2      	; 0x42e <__stop_program>
